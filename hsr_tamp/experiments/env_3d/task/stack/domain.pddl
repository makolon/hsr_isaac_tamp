(define (domain hsr-stack-tamp)
  (:requirements :strips :equality)
  (:predicates
    ; Static predicates
    (Arm ?a)
    (Block ?b)
    (Region ?s)
    (BTraj ?t)
    (ATraj ?t)
    (Pose ?b ?p)
    (Grasp ?b ?g)
    (Placeable ?b ?s)
    (Stackable ?b1 ?b2)
    (Kin ?a ?b ?p ?g ?q ?t)
    (BaseMotion ?q1 ?t ?q2)
    (ArmMotion ?a ?q1 ?t ?q2)
    (TrajPoseCollision ?t ?b ?p)
    (TrajArmCollision ?t ?a ?q)
    (TrajGraspCollision ?t ?a ?b ?g)
    (CFreePosePose ?b ?p ?b2 ?p2)
    (CFreeApproachPose ?b ?p ?g ?b2 ?p2)
    (CFreeTrajPose ?t ?b2 ?p2)

    ; Fluent predicates
    (AtPose ?b ?p)
    (AtGrasp ?a ?b ?g)
    (AtAConf ?a ?q)
    (AtBConf ?q)
    (CanMove)
    (HandEmpty ?a)
    (Contain ?b ?p ?s)
    (BlockContain ?b1 ?p1 ?b2 ?p2)
    (Stacked ?b1 ?b2)
    (Holding ?a ?b)

    ; Derived predicates
    (In ?b ?s)
    (On ?b1 ?b2)
    (UnsafePose ?b ?p)
    (UnsafeApproach ?b ?p ?g)
    (UnsafeATraj ?t)
    (UnsafeBTraj ?t)
  )
  (:functions
    (MoveCost ?t)
    (PickCost)
    (PlaceCost)
  )

  (:action move_base
    :parameters (?q1 ?q2 ?t)
    :precondition (and (BaseMotion ?q1 ?t ?q2)
                       (AtBConf ?q1) (CanMove)
                       (not (UnsafeBTraj ?t)))
    :effect (and (AtBConf ?q2)
                 (not (AtBConf ?q1)) (not (CanMove))
                 (increase (total-cost) (MoveCost ?t)))
  )

  (:action move_arm
    :parameters (?q1 ?q2 ?t)
    :precondition (and (ArmMotion ?a ?q1 ?t ?q2)
                       (AtAConf ?a ?q1))
    :effect (and (AtAConf ?a ?q2)
                 (not (AtAConf ?a ?q1)))
  )

  (:action pick
    :parameters (?a ?b ?p ?g ?q ?t)
    :precondition (and (Kin ?a ?b ?p ?g ?q ?t)
                       (AtPose ?b ?p) (HandEmpty ?a) (AtBConf ?q)
                       (not (UnsafeApproach ?b ?p ?g))
                       (not (UnsafeATraj ?t)))
    :effect (and (AtGrasp ?a ?b ?g) (CanMove)
                 (not (AtPose ?b ?p)) (not (HandEmpty ?a))
                 (increase (total-cost) (PickCost)))
  )

  (:action place
    :parameters (?a ?b ?p ?g ?q ?t)
    :precondition (and (Kin ?a ?b ?p ?g ?q ?t)
                       (AtGrasp ?a ?b ?g) (AtBConf ?q)
                       (not (UnsafePose ?b ?p))
                       (not (UnsafeApproach ?b ?p ?g))
                       (not (UnsafeATraj ?t)))
    :effect (and (AtPose ?b ?p) (HandEmpty ?a) (CanMove)
                 (not (AtGrasp ?a ?b ?g))
                 (increase (total-cost) (PlaceCost)))
  )

  (:action stack
    :parameters (?a ?b1 ?p1 ?g ?q ?b2 ?p2 ?t)
    :precondition (and (Kin ?a ?b1 ?p1 ?g ?q ?t)
                       (AtAConf ?a ?q) (AtGrasp ?a ?b1 ?g) (Stackable ?b2 ?b1)
                       (Block ?b2) (AtPose ?b2 ?p2) (not (= ?b1 ?b2)))
    :effect (and (AtPose ?b1 ?p1) (HandEmpty ?a) (CanMove) (Stacked ?b1 ?b2)
                 (not (AtGrasp ?a ?b1 ?g))
                 (increase (total-cost) 10))
  )

  (:derived (In ?b ?s)
    (exists (?p) (and (Contain ?b ?p ?s)
                      (AtPose ?b ?p))))

  (:derived (On ?b1 ?b2)
    (exists (?p1 ?p2) (and (BlockContain ?b1 ?p1 ?b2 ?p2)
                      (AtPose ?b1 ?p1) (AtPose ?b2 ?p2) (Stacked ?b1 ?b2))))

  ; (:derived (On ?b ?r)
  ;   (exists (?p) (and (Supported ?b ?p ?r)
  ;                     (AtPose ?b ?p)))
  ; )

  (:derived (Holding ?a ?b)
    (exists (?g) (and (Arm ?a) (Grasp ?b ?g)
                      (AtGrasp ?a ?b ?g)))
  )

  (:derived (UnsafePose ?b ?p)
    (exists (?b2 ?p2) (and (Pose ?b ?p) (Pose ?b2 ?p2) (not (= ?b ?b2))
                           (not (CFreePosePose ?b ?p ?b2 ?p2))
                           (AtPose ?b2 ?p2)))
  )

  (:derived (UnsafeApproach ?b ?p ?g)
    (exists (?b2 ?p2) (and (Pose ?b ?p) (Grasp ?b ?g) (Pose ?b2 ?p2) (not (= ?b ?b2))
                           (not (CFreeApproachPose ?b ?p ?g ?b2 ?p2))
                           (AtPose ?b2 ?p2)))
  )

  (:derived (UnsafeATraj ?t)
    (exists (?b2 ?p2) (and (ATraj ?t) (Pose ?b2 ?p2)
                           (not (CFreeTrajPose ?t ?b2 ?p2))
                           (AtPose ?b2 ?p2)))
  )
)